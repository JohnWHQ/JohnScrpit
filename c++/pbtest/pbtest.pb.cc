// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbtest.proto

#include "pbtest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class gps_data_LocationXYDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gps_data_LocationXY>
      _instance;
} _gps_data_LocationXY_default_instance_;
class gps_dataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<gps_data>
      _instance;
} _gps_data_default_instance_;
namespace protobuf_pbtest_2eproto {
void InitDefaultsgps_data_LocationXYImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_gps_data_LocationXY_default_instance_;
    new (ptr) ::gps_data_LocationXY();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gps_data_LocationXY::InitAsDefaultInstance();
}

void InitDefaultsgps_data_LocationXY() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsgps_data_LocationXYImpl);
}

void InitDefaultsgps_dataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_pbtest_2eproto::InitDefaultsgps_data_LocationXY();
  {
    void* ptr = &::_gps_data_default_instance_;
    new (ptr) ::gps_data();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gps_data::InitAsDefaultInstance();
}

void InitDefaultsgps_data() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsgps_dataImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data_LocationXY, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data_LocationXY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data_LocationXY, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data_LocationXY, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, terminalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, datatime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, loctype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, gpsstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, satellite_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, testfield1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, locxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, satellitetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gps_data, xys_),
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  2,
  13,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gps_data_LocationXY)},
  { 9, 29, sizeof(::gps_data)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_gps_data_LocationXY_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_gps_data_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pbtest.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014pbtest.proto\"\234\003\n\010gps_data\022\n\n\002id\030\001 \001(\003\022"
      "\022\n\nterminalId\030\002 \001(\t\022\020\n\010dataTime\030\003 \001(\t\022\013\n"
      "\003lon\030\004 \001(\001\022\013\n\003lat\030\005 \001(\001\022\r\n\005speed\030\006 \001(\002\022\020"
      "\n\010altitude\030\007 \001(\005\022\017\n\007locType\030\010 \001(\005\022\021\n\tgps"
      "Status\030\t \001(\005\022\021\n\tdirection\030\n \001(\002\022\021\n\tsatel"
      "lite\030\013 \001(\005\022\022\n\ntestField1\030\014 \001(\003\022#\n\005locXY\030"
      "\r \001(\0132\024.gps_data.LocationXY\022.\n\rsatellite"
      "Type\030\016 \002(\0162\027.gps_data.SatelliteType\022\013\n\003x"
      "ys\030\017 \003(\005\032\"\n\nLocationXY\022\t\n\001x\030\001 \001(\t\022\t\n\001y\030\002"
      " \001(\t\"\?\n\rSatelliteType\022\013\n\007DEFAULT\020\000\022\007\n\003GP"
      "S\020\001\022\013\n\007GLONASS\020\002\022\013\n\007GALILEO\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 429);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbtest.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_pbtest_2eproto
const ::google::protobuf::EnumDescriptor* gps_data_SatelliteType_descriptor() {
  protobuf_pbtest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pbtest_2eproto::file_level_enum_descriptors[0];
}
bool gps_data_SatelliteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const gps_data_SatelliteType gps_data::DEFAULT;
const gps_data_SatelliteType gps_data::GPS;
const gps_data_SatelliteType gps_data::GLONASS;
const gps_data_SatelliteType gps_data::GALILEO;
const gps_data_SatelliteType gps_data::SatelliteType_MIN;
const gps_data_SatelliteType gps_data::SatelliteType_MAX;
const int gps_data::SatelliteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void gps_data_LocationXY::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gps_data_LocationXY::kXFieldNumber;
const int gps_data_LocationXY::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gps_data_LocationXY::gps_data_LocationXY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pbtest_2eproto::InitDefaultsgps_data_LocationXY();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps_data.LocationXY)
}
gps_data_LocationXY::gps_data_LocationXY(const gps_data_LocationXY& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_x()) {
    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_y()) {
    y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  // @@protoc_insertion_point(copy_constructor:gps_data.LocationXY)
}

void gps_data_LocationXY::SharedCtor() {
  _cached_size_ = 0;
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

gps_data_LocationXY::~gps_data_LocationXY() {
  // @@protoc_insertion_point(destructor:gps_data.LocationXY)
  SharedDtor();
}

void gps_data_LocationXY::SharedDtor() {
  x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void gps_data_LocationXY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gps_data_LocationXY::descriptor() {
  ::protobuf_pbtest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pbtest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gps_data_LocationXY& gps_data_LocationXY::default_instance() {
  ::protobuf_pbtest_2eproto::InitDefaultsgps_data_LocationXY();
  return *internal_default_instance();
}

gps_data_LocationXY* gps_data_LocationXY::New(::google::protobuf::Arena* arena) const {
  gps_data_LocationXY* n = new gps_data_LocationXY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void gps_data_LocationXY::Clear() {
// @@protoc_insertion_point(message_clear_start:gps_data.LocationXY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!x_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*x_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!y_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*y_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gps_data_LocationXY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps_data.LocationXY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->x().data(), static_cast<int>(this->x().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_data.LocationXY.x");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->y().data(), static_cast<int>(this->y().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_data.LocationXY.y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps_data.LocationXY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps_data.LocationXY)
  return false;
#undef DO_
}

void gps_data_LocationXY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps_data.LocationXY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->x().data(), static_cast<int>(this->x().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.LocationXY.x");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->x(), output);
  }

  // optional string y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->y().data(), static_cast<int>(this->y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.LocationXY.y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps_data.LocationXY)
}

::google::protobuf::uint8* gps_data_LocationXY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gps_data.LocationXY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->x().data(), static_cast<int>(this->x().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.LocationXY.x");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->x(), target);
  }

  // optional string y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->y().data(), static_cast<int>(this->y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.LocationXY.y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps_data.LocationXY)
  return target;
}

size_t gps_data_LocationXY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gps_data.LocationXY)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // optional string y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gps_data_LocationXY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gps_data.LocationXY)
  GOOGLE_DCHECK_NE(&from, this);
  const gps_data_LocationXY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gps_data_LocationXY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gps_data.LocationXY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gps_data.LocationXY)
    MergeFrom(*source);
  }
}

void gps_data_LocationXY::MergeFrom(const gps_data_LocationXY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gps_data.LocationXY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_x();
      x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_y();
      y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
    }
  }
}

void gps_data_LocationXY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gps_data.LocationXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gps_data_LocationXY::CopyFrom(const gps_data_LocationXY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gps_data.LocationXY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gps_data_LocationXY::IsInitialized() const {
  return true;
}

void gps_data_LocationXY::Swap(gps_data_LocationXY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gps_data_LocationXY::InternalSwap(gps_data_LocationXY* other) {
  using std::swap;
  x_.Swap(&other->x_);
  y_.Swap(&other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata gps_data_LocationXY::GetMetadata() const {
  protobuf_pbtest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pbtest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void gps_data::InitAsDefaultInstance() {
  ::_gps_data_default_instance_._instance.get_mutable()->locxy_ = const_cast< ::gps_data_LocationXY*>(
      ::gps_data_LocationXY::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int gps_data::kIdFieldNumber;
const int gps_data::kTerminalIdFieldNumber;
const int gps_data::kDataTimeFieldNumber;
const int gps_data::kLonFieldNumber;
const int gps_data::kLatFieldNumber;
const int gps_data::kSpeedFieldNumber;
const int gps_data::kAltitudeFieldNumber;
const int gps_data::kLocTypeFieldNumber;
const int gps_data::kGpsStatusFieldNumber;
const int gps_data::kDirectionFieldNumber;
const int gps_data::kSatelliteFieldNumber;
const int gps_data::kTestField1FieldNumber;
const int gps_data::kLocXYFieldNumber;
const int gps_data::kSatelliteTypeFieldNumber;
const int gps_data::kXysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

gps_data::gps_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_pbtest_2eproto::InitDefaultsgps_data();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps_data)
}
gps_data::gps_data(const gps_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      xys_(from.xys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  terminalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_terminalid()) {
    terminalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terminalid_);
  }
  datatime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datatime()) {
    datatime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datatime_);
  }
  if (from.has_locxy()) {
    locxy_ = new ::gps_data_LocationXY(*from.locxy_);
  } else {
    locxy_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&satellitetype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(satellitetype_));
  // @@protoc_insertion_point(copy_constructor:gps_data)
}

void gps_data::SharedCtor() {
  _cached_size_ = 0;
  terminalid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&locxy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&satellitetype_) -
      reinterpret_cast<char*>(&locxy_)) + sizeof(satellitetype_));
}

gps_data::~gps_data() {
  // @@protoc_insertion_point(destructor:gps_data)
  SharedDtor();
}

void gps_data::SharedDtor() {
  terminalid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locxy_;
}

void gps_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gps_data::descriptor() {
  ::protobuf_pbtest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pbtest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const gps_data& gps_data::default_instance() {
  ::protobuf_pbtest_2eproto::InitDefaultsgps_data();
  return *internal_default_instance();
}

gps_data* gps_data::New(::google::protobuf::Arena* arena) const {
  gps_data* n = new gps_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void gps_data::Clear() {
// @@protoc_insertion_point(message_clear_start:gps_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!terminalid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*terminalid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!datatime_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datatime_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(locxy_ != NULL);
      locxy_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&altitude_) -
        reinterpret_cast<char*>(&id_)) + sizeof(altitude_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&loctype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&satellitetype_) -
        reinterpret_cast<char*>(&loctype_)) + sizeof(satellitetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool gps_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string terminalId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_terminalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->terminalid().data(), static_cast<int>(this->terminalid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_data.terminalId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dataTime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datatime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datatime().data(), static_cast<int>(this->datatime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gps_data.dataTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 altitude = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 locType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_loctype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loctype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpsStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_gpsstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpsstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 satellite = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_satellite();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 testField1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_testfield1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &testfield1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .gps_data.LocationXY locXY = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_locxy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gps_data.SatelliteType satelliteType = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gps_data_SatelliteType_IsValid(value)) {
            set_satellitetype(static_cast< ::gps_data_SatelliteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 xys = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120u, input, this->mutable_xys())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xys())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps_data)
  return false;
#undef DO_
}

void gps_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string terminalId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terminalid().data(), static_cast<int>(this->terminalid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.terminalId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->terminalid(), output);
  }

  // optional string dataTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datatime().data(), static_cast<int>(this->datatime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.dataTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->datatime(), output);
  }

  // optional double lon = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lon(), output);
  }

  // optional double lat = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lat(), output);
  }

  // optional float speed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  // optional int32 altitude = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->altitude(), output);
  }

  // optional int32 locType = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->loctype(), output);
  }

  // optional int32 gpsStatus = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gpsstatus(), output);
  }

  // optional float direction = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->direction(), output);
  }

  // optional int32 satellite = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->satellite(), output);
  }

  // optional int64 testField1 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->testfield1(), output);
  }

  // optional .gps_data.LocationXY locXY = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->locxy_, output);
  }

  // required .gps_data.SatelliteType satelliteType = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->satellitetype(), output);
  }

  // repeated int32 xys = 15;
  for (int i = 0, n = this->xys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->xys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps_data)
}

::google::protobuf::uint8* gps_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gps_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string terminalId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terminalid().data(), static_cast<int>(this->terminalid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.terminalId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->terminalid(), target);
  }

  // optional string dataTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datatime().data(), static_cast<int>(this->datatime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gps_data.dataTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datatime(), target);
  }

  // optional double lon = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lon(), target);
  }

  // optional double lat = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lat(), target);
  }

  // optional float speed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  // optional int32 altitude = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->altitude(), target);
  }

  // optional int32 locType = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->loctype(), target);
  }

  // optional int32 gpsStatus = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gpsstatus(), target);
  }

  // optional float direction = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->direction(), target);
  }

  // optional int32 satellite = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->satellite(), target);
  }

  // optional int64 testField1 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->testfield1(), target);
  }

  // optional .gps_data.LocationXY locXY = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *this->locxy_, deterministic, target);
  }

  // required .gps_data.SatelliteType satelliteType = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->satellitetype(), target);
  }

  // repeated int32 xys = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(15, this->xys_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps_data)
  return target;
}

size_t gps_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gps_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .gps_data.SatelliteType satelliteType = 14;
  if (has_satellitetype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->satellitetype());
  }
  // repeated int32 xys = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->xys_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->xys_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string terminalId = 2;
    if (has_terminalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->terminalid());
    }

    // optional string dataTime = 3;
    if (has_datatime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datatime());
    }

    // optional .gps_data.LocationXY locXY = 13;
    if (has_locxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->locxy_);
    }

    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional double lon = 4;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double lat = 5;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // optional float speed = 6;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 altitude = 7;
    if (has_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altitude());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 locType = 8;
    if (has_loctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loctype());
    }

    // optional int32 gpsStatus = 9;
    if (has_gpsstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpsstatus());
    }

    // optional float direction = 10;
    if (has_direction()) {
      total_size += 1 + 4;
    }

    // optional int32 satellite = 11;
    if (has_satellite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellite());
    }

    // optional int64 testField1 = 12;
    if (has_testfield1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->testfield1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gps_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gps_data)
  GOOGLE_DCHECK_NE(&from, this);
  const gps_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const gps_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gps_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gps_data)
    MergeFrom(*source);
  }
}

void gps_data::MergeFrom(const gps_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gps_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  xys_.MergeFrom(from.xys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_terminalid();
      terminalid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terminalid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_datatime();
      datatime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datatime_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_locxy()->::gps_data_LocationXY::MergeFrom(from.locxy());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000020u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000040u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      altitude_ = from.altitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      loctype_ = from.loctype_;
    }
    if (cached_has_bits & 0x00000200u) {
      gpsstatus_ = from.gpsstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000800u) {
      satellite_ = from.satellite_;
    }
    if (cached_has_bits & 0x00001000u) {
      testfield1_ = from.testfield1_;
    }
    if (cached_has_bits & 0x00002000u) {
      satellitetype_ = from.satellitetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gps_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gps_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gps_data::CopyFrom(const gps_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gps_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gps_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002000) != 0x00002000) return false;
  return true;
}

void gps_data::Swap(gps_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void gps_data::InternalSwap(gps_data* other) {
  using std::swap;
  xys_.InternalSwap(&other->xys_);
  terminalid_.Swap(&other->terminalid_);
  datatime_.Swap(&other->datatime_);
  swap(locxy_, other->locxy_);
  swap(id_, other->id_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
  swap(speed_, other->speed_);
  swap(altitude_, other->altitude_);
  swap(loctype_, other->loctype_);
  swap(gpsstatus_, other->gpsstatus_);
  swap(direction_, other->direction_);
  swap(satellite_, other->satellite_);
  swap(testfield1_, other->testfield1_);
  swap(satellitetype_, other->satellitetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata gps_data::GetMetadata() const {
  protobuf_pbtest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_pbtest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
